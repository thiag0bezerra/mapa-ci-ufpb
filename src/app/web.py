"""
Aplica√ß√£o para exibi√ß√£o de mapas SVG de um pr√©dio usando Streamlit.

Este aplicativo permite que os usu√°rios visualizem mapas interativos de diferentes andares de um pr√©dio.
Os usu√°rios podem selecionar um andar, visualizar o mapa correspondente e clicar em salas para obter
informa√ß√µes detalhadas sobre as disciplinas alocadas nessas salas.

Os dados s√£o obtidos da API da UFPB e processados para exibi√ß√£o no aplicativo.
"""

import streamlit as st
from st_click_detector import click_detector
from src.utils import (
    descarregar_conteudo,
    desestruturar_horario,
    criar_tabela_markdown,
)
from datetime import datetime
from src.saci import Alocacao
from src.svg.mapa import load_map

# URL da API para obter as aloca√ß√µes de disciplinas
url = "https://sa.ci.ufpb.br/api/db/public/paas?centro=ci"

# Baixa e processa os dados das aloca√ß√µes a partir da URL fornecida
alocacoes: list[Alocacao] = descarregar_conteudo(url)

# Configura√ß√£o inicial da p√°gina Streamlit
st.set_page_config(
    page_title="Mapas do Pr√©dio",
    page_icon="üè¢",
    layout="wide",
    initial_sidebar_state="auto",
)

# Lista de andares dispon√≠veis para sele√ß√£o pelo usu√°rio
andares: list[str] = [
    "Subsolo",
    "T√©rreo",
    "Primeiro Andar",
    "Segundo Andar",
    "Terceiro Andar",
]

# Caixa de sele√ß√£o para o usu√°rio escolher o andar que deseja visualizar
andar_selecionado: str = st.selectbox("Selecione o andar", andares)

# Exibe o t√≠tulo do mapa correspondente ao andar selecionado
st.subheader(f"Mapa do {andar_selecionado}")

# Carrega o conte√∫do SVG do mapa do andar selecionado
svg_conteudo: str = load_map(andar_selecionado)

# Detecta cliques no mapa SVG
clicked: str = click_detector(svg_conteudo)

################
# Filtra as aloca√ß√µes de disciplinas por andar

# Dicion√°rio que mapeia os andares aos seus prefixos correspondentes nas salas
prefixos_andar: dict[str, str] = {
    "Subsolo": "sb",
    "T√©rreo": "t",
    "Primeiro Andar": "1",
    "Segundo Andar": "2",
    "Terceiro Andar": "3",
}

# Obt√©m o prefixo correspondente ao andar selecionado
prefixo: str = prefixos_andar.get(andar_selecionado, "")

# Filtra as aloca√ß√µes para incluir apenas aquelas do andar selecionado
if prefixo:
    alocacoes = [
        alocacao
        for alocacao in alocacoes
        if alocacao.sala.nome.lower().startswith(prefixo)
    ]

################


@st.dialog("Bloco CI", width="large")
def visualizar_disciplina(alocacoes: list[Alocacao]) -> None:
    """
    Exibe informa√ß√µes detalhadas sobre as aloca√ß√µes de disciplinas em uma sala espec√≠fica.

    Args:
        alocacoes (list[Alocacao]): Lista de aloca√ß√µes para a sala selecionada.
    """
    # Obt√©m a primeira aloca√ß√£o para extrair informa√ß√µes da sala
    alocacao = alocacoes[0]

    # Extrai informa√ß√µes da sala
    nome: str = f"{alocacao.sala.bloco} {alocacao.sala.nome}"
    acessivel: str = "‚úÖ Sim" if alocacao.sala.acessivel else "‚ùå N√£o"
    capacidade: str = f"{alocacao.sala.capacidade} pessoas"
    tipo: str = alocacao.sala.tipo

    # Exibe as informa√ß√µes da sala em formato de tabela Markdown
    st.markdown("## Informa√ß√µes:")
    st.markdown(
        criar_tabela_markdown(
            ["Nome", "Acess√≠vel", "Capacidade", "Tipo", "Disciplinas"],
            [[nome, acessivel, capacidade, tipo, str(len(alocacoes))]],
        )
    )

    # Exibe o t√≠tulo para a se√ß√£o de disciplinas
    st.markdown("## Disciplinas:")

    # Op√ß√µes de visualiza√ß√£o dispon√≠veis para o usu√°rio
    mode: str = st.selectbox(
        "Visualiza√ß√£o",
        ("Geral", "Hoje", "Por dia"),
    )

    # Obt√©m o dia atual da semana no formato desejado (1 para Domingo, ..., 7 para S√°bado)
    weekday_python: int = datetime.today().weekday()  # 0 √© segunda, 6 √© domingo
    weekday_mapping: dict[int, int] = {
        6: 1,  # Domingo
        0: 2,  # Segunda-feira
        1: 3,  # Ter√ßa-feira
        2: 4,  # Quarta-feira
        3: 5,  # Quinta-feira
        4: 6,  # Sexta-feira
        5: 7,  # S√°bado
    }
    hoje: int = weekday_mapping[weekday_python]

    # Dicion√°rio que mapeia os n√∫meros dos dias para os nomes dos dias da semana
    semana: dict[int, str] = {
        1: "Domingo",
        2: "Segunda-feira",
        3: "Ter√ßa-feira",
        4: "Quarta-feira",
        5: "Quinta-feira",
        6: "Sexta-feira",
        7: "S√°bado",
    }

    linhas: list[list[str]] = []  # Lista de linhas para a tabela de disciplinas
    dias: list[int] = []  # Lista de dias em que a disciplina ocorre
    horarios_desestruturados: dict = {}  # Dicion√°rio com informa√ß√µes desestruturadas do hor√°rio
    if mode == "Por dia":
        # Exibe as disciplinas separadas por dia da semana
        for dia_numero, dia_nome in semana.items():
            for alocacao in alocacoes:
                # Desestrutura o hor√°rio para obter os dias em que a disciplina ocorre
                horarios_desestruturados = desestruturar_horario(
                    alocacao.disciplina.horario
                )
                dias = horarios_desestruturados["dias"]

                # Verifica se a disciplina ocorre no dia atual da itera√ß√£o
                if dia_numero in dias:
                    linhas.append(
                        [
                            alocacao.disciplina.codigo,
                            alocacao.disciplina.horario,
                            alocacao.disciplina.turma,
                            alocacao.disciplina.nome,
                            alocacao.disciplina.docente,
                            str(alocacao.disciplina.alunos),
                        ]
                    )
            if linhas:
                # Exibe as disciplinas para o dia atual se houverem
                st.markdown(f"### {dia_nome}")
                st.markdown(
                    criar_tabela_markdown(
                        [
                            "C√≥digo",
                            "Hor√°rio",
                            "Turma",
                            "Disciplina",
                            "Docente",
                            "Alunos",
                        ],
                        linhas,
                    )
                )
    else:
        # Exibe todas as disciplinas ou apenas as de hoje, dependendo da op√ß√£o selecionada
        for alocacao in alocacoes:
            if mode == "Geral":
                # Adiciona todas as disciplinas √† lista
                linhas.append(
                    [
                        alocacao.disciplina.codigo,
                        alocacao.disciplina.horario,
                        alocacao.disciplina.turma,
                        alocacao.disciplina.nome,
                        alocacao.disciplina.docente,
                        str(alocacao.disciplina.alunos),
                    ]
                )
            elif mode == "Hoje":
                # Desestrutura o hor√°rio para obter os dias em que a disciplina ocorre
                horarios_desestruturados = desestruturar_horario(
                    alocacao.disciplina.horario
                )
                dias = horarios_desestruturados["dias"]

                # Verifica se a disciplina ocorre no dia atual
                if hoje in dias:
                    linhas.append(
                        [
                            alocacao.disciplina.codigo,
                            alocacao.disciplina.horario,
                            alocacao.disciplina.turma,
                            alocacao.disciplina.nome,
                            alocacao.disciplina.docente,
                            str(alocacao.disciplina.alunos),
                        ]
                    )

        # Exibe as disciplinas filtradas
        st.markdown(
            criar_tabela_markdown(
                ["C√≥digo", "Hor√°rio", "Turma", "Disciplina", "Docente", "Alunos"],
                linhas,
            )
        )

    # Exibe instru√ß√µes sobre como interpretar o hor√°rio das disciplinas
    st.markdown("""
    ---
    ## Como interpretar o hor√°rio das disciplinas:

    ### 1. Identifica√ß√£o dos dias da semana:
    - **2** = Segunda-feira
    - **3** = Ter√ßa-feira
    - **4** = Quarta-feira
    - **5** = Quinta-feira
    - **6** = Sexta-feira
    - **7** = S√°bado

    ### 2. Identifica√ß√£o do turno:
    - **M** = Manh√£
    - **T** = Tarde
    - **N** = Noite

    ### 3. Exemplo de hor√°rios:
    - **Exemplo 1: 2M2345**
        - Segunda-feira (**2**) no turno da manh√£ (**M**), nas aulas 2, 3, 4 e 5.

    | Aulas | Manh√£          | Tarde         | Noite         |
    |-------|----------------|---------------|---------------|
    | 1     | 07:00 - 08:00  | 13:00 - 14:00 | 19:00 - 20:00 |
    | 2     | 08:00 - 09:00  | 14:00 - 15:00 | 20:00 - 21:00 |
    | 3     | 09:00 - 10:00  | 15:00 - 16:00 | 21:00 - 22:00 |
    | 4     | 10:00 - 11:00  | 16:00 - 17:00 | 22:00 - 23:00 |
    | 5     | 11:00 - 12:00  | 17:00 - 18:00 | -             |
    | 6     | 12:00 - 13:00  | 18:00 - 19:00 | -             |

    """)


# Verifica se o usu√°rio clicou em algum elemento do mapa
if clicked and clicked != "":
    print(f"{datetime.now()} clicou em {clicked}")
    alocacoes_da_sala: list[Alocacao] = []
    # Procura por aloca√ß√µes cuja sala corresponda ao elemento clicado
    for alocacao in alocacoes:
        if alocacao.sala.nome.lower() in clicked.lower():
            alocacoes_da_sala.append(alocacao)
    # Se houver aloca√ß√µes para a sala clicada, exibe o di√°logo com as informa√ß√µes
    if alocacoes_da_sala:
        visualizar_disciplina(alocacoes_da_sala)
